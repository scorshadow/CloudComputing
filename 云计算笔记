




DBA DAY3
在 mysql中也可以执行linux系统命令，system cat /etc/passwd 命令前加上 system
知识点大纲

MYSQL存储引擎 
mysql 组件
1.1.1.管理工具 
1.1.2 SQL接口
1.1.3 Parser 分析器

1.1 存储引擎？ 
show engines; 查看存储引擎
show create table 表名 //查看已创建表的存储引擎
show table status like "users"\G;//查看已创建表的属性信息 存储引擎，创建时间，更新时间
设置默认存储引擎
vim /etc/my.cnf
[default]
default-storage-engine="innodb"
创建表时指定表使用的存储引擎
create table t4(id int) engine=innodb;
修改表使用的存储引擎
alter table 表名 engine=innodb[myisam]
存储引擎的特点？
MYISAM 
支持表级锁 给整张表加锁 加锁后其他客户端不能访问，当前客户端释放锁后其他客户端才能访问 并发量小，系统开销小
不支持事务，事务回滚，外键

表名.frm desc 表名
表名.MYI show index from 表名  存储的是索引
表名.MYD  select * from 表名 

select ---------------->myisam  查询多的业务适合使用myisam

INNODB
支持行级锁定
支持事务，事务回滚，外键

表名.frm desc 表名 
表名.ibd select * from 表名； +show index from 表名；
支持行级锁 加锁后当前行不能被其他客户端访问，其他客户端可以访问 其他 行记录 并发量大，但是系统开销大
updated ，delete insert ---->innodb  适合写操作多的业务

建表时如何决定表使用哪种存储引擎
查询多的业务适合使用myisam  适合写操作多的业务

锁机制
锁粒度 
 表级锁：
 行级锁
锁类型 
读锁 支持并发锁
写锁（互斥锁，排他锁），是独占锁，上锁期间其他线程不能读表或写表

事务 

事务回滚 在事务执行过程中任意一步失败，恢复之前所有的操作。
事务日志文件：记录对innodb的表执行过的sql操作。
ib_logfile0:事务成功提交的日志 
ibdata1:事务失败的日志

事务特性：
Atomic:原子性 要么全成功，要么全失败
Consistency:一致性 事务操作的前后，表中的记录没有变化。
Isolation：隔离性 事务操作是相互隔离不受影响的 事务未提交时
Durability:持久性 数据一旦提交，不可改变，永久改变，永久改变表数据

1.2
数据导入导出
2.1 数据导入导出搜索路径 /var/lib/mysql-files/
show variables like "secure_file_priv";
搜索路径可以修改 【注意：不要在root目录下定义搜索路径，如:/root/mydb
vim /etc/my.cnf
在[mysqld]下面添加
[mysqld]
secure_file_priv="/mydbdir"
:x
mkdir /mydbdir/
chown mysql /mydbdir
systemctl restart mysqld

2.2 数据导入
2.2.1 什么是数据导入：把系统文件的内容存储到数据库的表中
2.2.2 命令用法
mysql>load data infile "目录名/文件名" into talbe 表名
FIELDS TERMINATED BY "字段分隔符"
LINES TERMINATED BY  "\n";
 

2.2.3 练习

2.3 数据导出 
2.3.1 把数据导出到系统文件 注意：导出的文件名不能相同;导出是表中的记录，不包括字段名 禁用SELinux 。
2.3.2 命令用法
select * from 表名 into outfile "目录名/文件名" field terminated by "字段分隔符" lines terminated by "/n 行分隔符" 

2.3.3 练习，


管理表记录
3.1增加表记录，给所有字段赋值
insert into users values();
添加N条记录
insert into users values
(),
(),
();
插入一条记录，给指定的字段赋值
insert into users(name,uid)values("jerry",4001);
插入多条记录，给指定的字段赋值
insert into user(name,uid)values(),(),();

3.2 查询表记录
select 字段 from 表名
select 字段 from 表名  where 条件表达式

3.3 更新表记录
批量更新  update 表名 set 字段1=值,字段2=值;
只更新符合条件的:update 表名 set 字段1=值,字段2=值 where 条件="";

3.4 删除表
delete from 表名 where [条件] 

匹配条件（select delete update)
4.1数值比较 = != > >= <=
select * from user where uid=100;
select * from user where id<10;
select * from user where 100=100;

4.2 字符比较， = != 
select name from user where name="adm";
select name,shell from user where shell !="/bin/bash";
select name from user where name="adm";

4.3 匹配空 is null
select * from user where name is null;
insert into user(name)values(null);
select * from user where name is null;

4.4 匹配非空 is not null
select * from user where is not null;

逻辑匹配 多个条件匹配时使用
逻辑或 or
select name,uid,gid from users where name="root" or uid=3 or gid=1; 
逻辑与 and
select name,uid,gid from users where name="root" and uid=3 and gid=1;
逻辑非 ! 和 not
select * from users where name !="root";
select * from users where name is not null;

范围内匹配/去重匹配
在...里.. in(值列表)
select name from users where name in ("ada","lion","tom","lucy");
select name from users where uid in (10,20,30,7);
不在..里.. not in(值列表)
select name,shell from user where shell not in ("/bin/bash","/sbin/nologin");
在..之间...between数字1 and 数字2
select * from users where id between 5 and 15;
select * from users where uid between 10 and 20;
distinct 去重显示 相同的只显示一遍
select distinct gid from users;
select distinct shell from users where id>=10;
高级匹配条件
1.模糊查询 like _ %(0个或多个) 普通字符

slect name from uses where name like '___';
slect name from uses where name like '__';
select name from users where name like 'a%';
select name from users where name like '%a%';（至少有一个字符a）
2.正则表达式 . ^ $ [] [^] * | 
select name from users where name regexp '^a|^r';
select name from users where name regexp '[0-9]';
select name from users where name regexp '^r.*t$';
3.四则运算
select name,uid,uid-1 from  users where id <=3;
update user set uid=uid+1 where id<=3;
select name,uid,gid,uid+gid sum from users where id<=3;
提高优先级()
select name,uid,gid,(uid +gid)/2 pjz from user where id <=3;

操作查询结果
1.聚集函数
select avg(uid) from users;
select avg(uid) from users where uid <=10;

select sum(uid) from users;
select sum(uid) from users where shell !="/bin/bash";

select min(uid) from users;
select min(uid) from users where name regexp '^a';

select max(uid) from users;
select max(uid) from users;

select count(name) from users;
select count(name) from users where shell="/bin/bash";

2.查询结果排序
select name,uid from users where uid>=10 and uid<=500 order by uid desc;
select name,uid from users where uid>=10 and uid<=500 order by uid;
select name,uid from users where uid>=10 and uid<=500 order by uid asc;
查询结果分组 group by
select shell from users;
select shell from users group by shell;
select shell from users where name regexp "a" group by shell;
select distinct shell from users where name regexp "a";
查询结果过滤 having 条件, 在查询结果里过滤条件
select name from users where shell!="/bin/bash" having name="adm";

select name from users where shell!="/bin/bash" and name="adm";

限制查询结果显示行数 limit N 显示前N条记录，limit N , M 从查询结果的 第 N+1 行开始显示，显示 M 行，limit 0是第一行
select * from users where uid <= 10;
select * from users where uid<=10 limit 3; 
select * from users where uid <=10 limit 6, 3; ##从查询结果的 第7行开始显示，显示3行



day4
多表查询
1.复制表 
备份数据 create table userdb.users2 select * from users;  
快速建表,只有表结构，查询条件不成立 create table userdb.users3 select * from userdb.users where 1  > 2;


2.多表查询
1.迪卡积
select t1.name,t2.name from t1,t2;
select t1.name ,t1.uid,t2.* from t1,t2;
select * from t1,t2 where t1.name="root" and t1.name=t2.name;
2.where 子查询 
select name ,uid from userdb.users where uid > (select avg(uid) from userdb.users);
select name from userdb.users where name in(select user from mysql.user where host="localhost" and user="root");

3.左连接 left join...on...  查询条件成立时，以左边的表为主显示查询结果
准备表
create talbe t3 select name,uid,shell,password from userdb.users limit 6;
create table t4 select name,uid,shell,password from userdb.users limit8;

select * from t3 left join t4 on t3.name=t4.name and t3.uid=t4.uid;
4.右连接 right join...on... 查询条件成立时，以右边的表为主显示查询结果
select * from t3 right join t4 on t3.name=t4.name and t3.uid=t4.uid;

mysql管理工具
phpmyAdmin
workbench
Navicat
用户授权及撤销
修改密码
mysqladmin -hlocalhost -uroot -p password "新密码"
Enter password:旧密码


恢复MySQL管理密码
停止服务
systemctl  stop mysqld.service 
vim /etc/my.cnf
若配置了密码策略要注释掉
#validate_password_policy=0
#validate_password_length=6
添加skip-grant-tables=1 ##跳过授权表
重启服务
systemctl  restart mysqld.service
mysql -u root -p
Enter password:   //直接回车
update mysql.user set authentication_string=password('123456') where user='root' and host='localhost' //重设root密码
flush privileges; //刷新授权表
通过执行“FLUSH PRIVILEGES;”可使授权表立即生效，对于正常运行的MySQL服务，也可以用上述方法来修改密码，不用重启服务。
本例中因为是恢复密码，最好重启MySQL服务程序，所以上述“FLUSH PRIVILEGES;”操作可跳过

重新以正常方式启动MySQL服务程序，验证新密码
如果前面是修改/etc/my.cnf配置的方法来跳过授权表，则重置root密码后，应去除相应的设置以恢复正常
vim /etc/my.cnf
[mysqld]
#skip_grant_tables=1     
systemctl  restart mysqld.service

3.1 授权库

3.2用户授权
grant 权限列表 on 库名.表名 to 用户名@"客户端地址" identified by "密码" with grant option;
grant all on *.* to root @"192.168.4.%" identified by "123456" with grant option;
show grants for root@"192.168.4.51";
show grants;显示访问权限
% 匹配所有主机
192.168.1.%：匹配指定的一个网段
192.168.1.1：匹配一个DNS区域
svr1.tarena.com:匹配指定域名的单个主机
select @@hostname;查看主机名
select user();查看连接用户名及客户端地址
show grants;显示访问权限

grant all on testdb.* to admin@"%" identified by "123456";
select user,host from mysql.user;
show grants for admin@"%";



3.3权限撤销
select user,host from mysql.user;
show grants  for root@"192.168.4.51";
revoke grant option on *.*  from root@192.168.4.51";
revoke delete,update on *.* from root@192.168.4.51";
revoke all on *.* from root@"192.168.4.51";
select user,host from mysql.user where user="root" and host="192.168.4.51";
drop user root@"192.168.4.51";


授权用户修改连接密码
set password=password('123456');
管理员修改授权用户密码
set password from ada@"192.168.4.%"=password('123456');

DAY5 数据备份与恢复
完全备份与恢复
数据备份方式 物理备份 逻辑备份
1物理备份 冷备，cp,tar
cp -rp /var/lib/mysql/数据库 备份目录/文件名
tar -czvf xxx.tar.gz /var/lib/mysql/数据库/*
恢复
cp -rp 备份目录/文件名 /var/lib/mysql/数据库/
tar -zxvf xxx.tar.gz -C /var/lib/mysql/数据库名/

2逻辑备份  mysqldump
备份操作 --all-database 或 -A 所有库
数据库名       单个库
数据库名 表名  单张表
-B 数据库1 数据库2 备份多个库
注意事项 无论备份还是恢复，都要验证用户权限

mysqldump -uroot -p密码 库名>路径/xxx.sql
mkdir /dbbak
mysqldump -uroot -p123456 -A > /dbbak/full.sql
mysqldum -uroot -p123456 userdb > /dbbak/userdb_full.sql;
mysqldump -uroot -p123456 -B db2 userdb > /dbbak/twodb.sql;
恢复操作 mysql
mysql -uroot -p密码 库名<路径/xxx.sql
注意 恢复时多个库的恢复库名参数不必写

数据增量备份与恢复
 --备份上次备份后，所有新产生的数据
实时增量备份 启用binlog日志文件实现
--记录除查询外的所有SQL命令
--可用于数据恢复
--配置mysql主从同步的必要条件
完全+差异
1  差异  10  1.sql   10 
2  差异  5   2.sql   5 
3  差异  6   3.sql   11
4  差异  2   4.sql   13
5  差异  4   5.sql   17
6  差异  1   6.sql   18
7  差异  10  7.sql   28 
完全+增量
1  差异  10  1.sql   10 
2  差异  5   2.sql   5 
3  差异  6   3.sql   6
4  差异  2   4.sql   2
5  差异  4   5.sql   4
6  差异  1   6.sql   1
7  差异  10  7.sql   10 
注：差异备份会把除完全备份外的备份重新备份；增量备份只备份当天增加的数据，实际生产环境中使用 完全+增量 的方式备份数据


vim /etc/my.cnf
server_id=50   ##可以用当前主机的ip地址主机位作为id值
log-bin ##启用bin_log日志
systemctl restart mysqld

分析binlog日志
 三种记录格式：
 1.statement:每一条修改数据的sql命令都记录在binlog日志中
 2.row:不记录sql语句上下文相关信息，仅保存哪条记录被修改。
 3.mixed:是以上两种格式的混合使用

查看日志当前记录格式
show variables like "binlog_format";
修改日志记录格式
vim /etc/my.cnf
[mysqld]
binlog_format=mixed 
systemctl restart mysqld

修改日志文件存储位置
vim /etc/my.cnf
log-bin=/logdir/plj

mkdir /logdir/plg
chown mysql /logdir/
mysqlbinlog /logdir/plj.000001 查看日志文件

手动生成新的日志文件
1.重启mysql服务
以下三种操作生成新的日志文件
执行SQL操作 mysql>flush logs
mysqldump  --flush-logs
mysql -uroot -p密码 -e 'flush logs'

删除日志文件
purge master logs to "ll.000002";  ##日志文件删除后，ll.index索引文件中的内容也会跟着改变

reset master; ##删除所有binlog日志，重建新日志

日志文件记录命令方式 ，使用日志恢复 数据 

731085508919
实时增量恢复(binlog)
使用日志恢复数据




差异备份 
 --备份完全备份后，所有新产生的数据
 
总结
mydump(锁表，写锁 适合数据量小的）
binlog 





innobackupex 实时热备不锁表 生产环境使用
使用 XtraBackup工具
包含两个组件：
--xtrabackup c程序，支持InnoDB/XtraDB 
--innobackup:以Perl脚本封装xtrabackup,还支MyISAM,但是仅支持完全备份

innobackupex 选项
--host --port  --user --password  --databases="db4,db5" dirname

完全备份与恢复
innobackupex --user root --password ... /备份路径 [--no-timestamp]

恢复：
1.drop database db5;
systemctl stop mysqld
2.准备恢复数据
innobackupex --apply-log /allbak
cat /allbak/xtrabackup_checkpoints
3.把备份文件拷贝回数据库目录下
rm -rf /var/lib/mysql/*
innobackupex --copy-back /allbak
4.修改数据库目录的所有者处级用户为mysql
chown -R mysql:mysql /var/lib/mysql
5.启动数据库服务
systemctl start mysqld;

增量备份与恢复
首次备份 备份所有数据
innobackupex --user root --password 123456 /fullbak --no-timestamp
增加数据
insert into db5.a values(111111);
增量备份
innobackupex --user root --password 123456 incremental /new1 --incremental-basedir=/fullbak  --no-timestamp
insert into db5.a values(2222222);
innobackupex --user root --password 123456 incremental /new2 --incremental-basedir=/new1 --no-time-stamp

增量恢复
准备恢复数据
innobacupex --apply-log --redo-only /fullbak
合并日志 
innobackupex --apply-log --redo-only /fullbak --increment-dir=/new1
innobackupex --apply-log --redo-only /fullbak --increment-dir=/new2

把备份文件拷贝回数据库目录下
rm -rf /var/lib/mysql/*
innobackupex --copy-back /fullbak
rm -rf /new1
rm -rf /new2

修改目录的所有者和组为mysql用户
chown -R mysql:mysql /var/lib/mysql

启动数据服务器
systemctl start mysqld
管理员登录查看数
seelct * from db5.a;
insert into db5.a values(000000);
再次执行增量备份
innobackupex --user root --password 123456 --incremental /dir1 --incremental-basedir=/fullbak --no-timestamp;


恢复完全备份中的一张数据表

create table db5.b(name char(10));
insert into db5.b values("ada");
use db5;
show tables;
备份所有db5库所有数据
innobackupex --user root --password 123456 --databases="db5" /db5bak --no-timestamp


DBA 1 总结
备份/恢复 
1.冷备份适用于MyISAM引擎，直接复制对应的数据库目录即可；恢复时重新复制回来就行
2.逻辑备份 mysqldump -u 用户名 -p [-B] 数据库... >数据库.sql 
备份单库：mysqldump -u -root -p userdb>userdb.sql
备份多个库 mysqldump -u root -p -B 库1 库2 > 库.sql
所有库 mysqldump -u root -p --all-databases [-A]

恢复  先建立空库，再执行mysql导入
mysql -u root -p 数据库名 < 库名.sql

3.增量备份 binlog日志
vim /etc/my.cnf
log-bin=路径    #启用日志
server_id  #服务编号
binlog_format="statemnet/mixed/row "
                statement 每一条修改数据的sql都记录在binlog日志中
                row 不记录sql语句的上下文相关信息，仅保存哪条记录被修改
                mixed 以上两种格式的混合使用
systemctl restart mysqld
mysqlbinlog 工具
----格式 mysqlbinlog [选项] binlog日志文件名
--    --start-datetime="yyyy-mm-dd hh:mm:ss"
--    --stop-datetime="yyyy-mm--dd hh:mm:ss"
--    --start-position=数字
--    --stop-position=数字

查看binlog日志
mysqlbinlog 日志文件

恢复数据
mysqlbinlog --start-datetime="yyyy-mm-dd hh:mm:ss" --stop-datetime="yyyy-mm--dd hh:mm:ss" 日志文件 ｜ mysql -u root -p



innobackupex备份工具
安装percona软件包
innobackupex完整备份，增量备份
恢复数据

--host 主机名
--port 3306
--user 用户名
--password密码
--databases='库名'
--databases='库1 库2'
--databases='库.表'
--no-timestamp 不用日期命名备份文件存储的子目录，使用备份的数据库名做备份目录名
--no-timestamp 不使用日期命名备份目录名



DBA2

主从同步实时进行
从库有IO线程和sql线程
从库要先整体备份主库的数据，配置好主从服务后，才能实现主从备份



生产环境与第三方软件配合用于集群
主从从
主主结构




读写分离
192.168.4.51做mysql主服务器 192.168.4.52 从服务器
授权maxon,monscale用户 ip地址必须用%，若使用monscale@"192.168.4.%" 或 monscale@"192.168.4.51" 软件会自动在前面加上ipv6地址，会匹配出错。


grant replication slave,replication client on *.* to maxmon@"%" identified by "ada123";
grant select on mysql.*  to monscale@"%" identified by "ada123";

select user,host from mysql.user where user in("maxon","monscale");
grant insert,select on *.* to student@'%' identified by "ada123";

在198.168.4.56上做读写分离服务
装包 maxscale 
vim /etc/maxscale.cnf
[maxscale]
threads=auto #线程数，改为auto,根据cpu核心数确定 

第18行
[server1] #定义第一台数据库服务器
type=server
address=192.168.4.51 #ip地址 
port=3306            #端口号
protocol=MySQLBackend 

[server2]   #定义第二台数据库服务器
type=server
address=192.168.4.52  #ip地址
port=3306  #端口号
protocol=MySQLBackend

第35行
[MySQL Monitor] 
type=monitor
module=mysqlmon
servers=server1,server2
user=maxmon,
password=ada123
monitor_interval=10000

第52行
只读服务器不定义，全部注释

63行
[Read-Write Service] #定义读写分离服务
type=service
router=readwritesplit
servers=server1,server2  #定义读写分离服务在server1,server2之间进行
user=monscale            #连接数据库服务器的监控用户名
password=ada123          #密码
max_slave_connection=100%
85行 Read-Only Listener注释掉

[MaxAdmin Listener] #定义读写分离服务使用的端口号
type=listener

port=4016 #端口号定义一个没被占用的，不指定的话有默认的

启动服务
maxscale -f /etc/maxscale.cnf
ps -C maxscale 查看maxscale进程
pkill maxscale  

maxadmin -P4016 -uadmin -pmariadb
MaxScale>list servers
客户端测试 192.168.4.50上
mysql -h192.168.4.56 -P4006 -uada -pada123 


MySQL多实例

停止服务mysqld 把/etc/my.cnf移走或删除.20
1）装包：
 在192.168.4.50上装包mysql-5.7.20-linux-glibc2.12-x86_64.tar.gz
解压后，mv mysql-5.7.20-linux-glibc2.12-x86_64 /usr/local/mysql
2）修改主配置文件：
vim /etc/my.cnf
[mysqld_multi]
mysqld=/usr/local/mysql/bin/mysqld_safe
mysqladmin=/usr/local/mysql/bin/mysqladmin
user=root

[mysqld1]
datadir=/dir1
port=3307
socket=/dir1/mysql1.sock
log-error=/dir1/mysql1.err

[mysql2]
datadir=/dir2
port=3308
socket=/dir2/mysql2.sock
log-error=/dir1/mysql2.err
3) mkdir /dir1 /dir2

4)启动服务
/usr/local/mysql/bin/mysqld_multi start 1

/usr/local/mysql/bin/mysqld_multi start 2

5）客户端访问测试
/usr/local/mysql/bin/mysql -uroot -p'初始密码' -S /dir1/mysql1.sock
alter user root@'localhost' identified by '123456'
exit

/usr/local/mysql -uroot -p123456 -S /dir1/mysql1.sock
create database db1;
create table db1.a(id int);
exit

/usr/local/mysql/bin/mysql -uroot -p'初始密码' -S /dir2/mysql2.sock
alter user root@'localhost' identified by '123456'
exit

/usr/local/mysql -uroot -p123456 -S /dir2/mysql2.sock
create database db2;
create table db2.a(id int);
exit


排错：
1.要先停止服务 
ss -utnlp | grep mysqld
杀进程或用下面的命令
/usr/local/mysql/bin/mysqld_multi --user=root --password=123456 stop  1





3）
MySQL性能调优


MYSQL高可用集群
集群分类：高可用HA(Keppalived0 LB(LVS
MHA软件：mha-mysql-manager mha-mysql-node
MHA软件实现0~30s内恢复故障
MHA 一主加多从实现高可用集群
MHA工作过程：当master故障时，Manager自动将拥有最新数据的slave提升为新的master
环境搭建 
把相关软件自定义yum仓库[包括系统光盘自带的perl包]
51~56 yum -y install perl* mha4mysql-node-norach
56机上还要安装 mha4mysql-manager  tar解压后，执行 perl Makefile-->make && make install

3部署MHA集群
3.1 部署mysql 一主多从 主从同步结构
配置主库51
配置主库52  
change master to master_host="192.168.4.51", master_user="repluser",master_password="ada123",master_log_file="master51.000001",master_log_pos="154";


配置从库53
配置从库54
配置从库55
配置管理56











