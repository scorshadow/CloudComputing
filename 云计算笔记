




DBA DAY3
在 mysql中也可以执行linux系统命令，system cat /etc/passwd 命令前加上 system
知识点大纲

MYSQL存储引擎 
mysql 组件
1.1.1.管理工具 
1.1.2 SQL接口
1.1.3 Parser 分析器

1.1 存储引擎？ 
show engines; 查看存储引擎
show create table 表名 //查看已创建表的存储引擎
show table status like "users"\G;//查看已创建表的属性信息 存储引擎，创建时间，更新时间
设置默认存储引擎
vim /etc/my.cnf
[default]
default-storage-engine="innodb"
创建表时指定表使用的存储引擎
create table t4(id int) engine=innodb;
修改表使用的存储引擎
alter table 表名 engine=innodb[myisam]
存储引擎的特点？
MYISAM 
支持表级锁 给整张表加锁 加锁后其他客户端不能访问，当前客户端释放锁后其他客户端才能访问 并发量小，系统开销小
不支持事务，事务回滚，外键

表名.frm desc 表名
表名.MYI show index from 表名  存储的是索引
表名.MYD  select * from 表名 

select ---------------->myisam  查询多的业务适合使用myisam

INNODB
支持行级锁定
支持事务，事务回滚，外键

表名.frm desc 表名 
表名.ibd select * from 表名； +show index from 表名；
支持行级锁 加锁后当前行不能被其他客户端访问，其他客户端可以访问 其他 行记录 并发量大，但是系统开销大
updated ，delete insert ---->innodb  适合写操作多的业务

建表时如何决定表使用哪种存储引擎
查询多的业务适合使用myisam  适合写操作多的业务

锁机制
锁粒度 
 表级锁：
 行级锁
锁类型 
读锁 支持并发锁
写锁（互斥锁，排他锁），是独占锁，上锁期间其他线程不能读表或写表

事务 

事务回滚 在事务执行过程中任意一步失败，恢复之前所有的操作。
事务日志文件：记录对innodb的表执行过的sql操作。
ib_logfile0:事务成功提交的日志 
ibdata1:事务失败的日志

事务特性：
Atomic:原子性 要么全成功，要么全失败
Consistency:一致性 事务操作的前后，表中的记录没有变化。
Isolation：隔离性 事务操作是相互隔离不受影响的 事务未提交时
Durability:持久性 数据一旦提交，不可改变，永久改变，永久改变表数据

1.2
数据导入导出
2.1 数据导入导出搜索路径 /var/lib/mysql-files/
show variables like "secure_file_priv";
搜索路径可以修改 【注意：不要在root目录下定义搜索路径，如:/root/mydb
vim /etc/my.cnf
在[mysqld]下面添加
[mysqld]
secure_file_priv="/mydbdir"
:x
mkdir /mydbdir/
chown mysql /mydbdir
systemctl restart mysqld

2.2 数据导入
2.2.1 什么是数据导入：把系统文件的内容存储到数据库的表中
2.2.2 命令用法
mysql>load data infile "目录名/文件名" into talbe 表名
FIELDS TERMINATED BY "字段分隔符"
LINES TERMINATED BY  "\n";
 

2.2.3 练习

2.3 数据导出 
2.3.1 把数据导出到系统文件 注意：导出的文件名不能相同;导出是表中的记录，不包括字段名 禁用SELinux 。
2.3.2 命令用法
select * from 表名 into outfile "目录名/文件名" field terminated by "字段分隔符" lines terminated by "/n 行分隔符" 

2.3.3 练习，


管理表记录
3.1增加表记录，给所有字段赋值
insert into users values();
添加N条记录
insert into users values
(),
(),
();
插入一条记录，给指定的字段赋值
insert into users(name,uid)values("jerry",4001);
插入多条记录，给指定的字段赋值
insert into user(name,uid)values(),(),();

3.2 查询表记录
select 字段 from 表名
select 字段 from 表名  where 条件表达式

3.3 更新表记录
批量更新  update 表名 set 字段1=值,字段2=值;
只更新符合条件的:update 表名 set 字段1=值,字段2=值 where 条件="";

3.4 删除表
delete from 表名 where [条件] 

匹配条件（select delete update)
4.1数值比较 = != > >= <=
select * from user where uid=100;
select * from user where id<10;
select * from user where 100=100;

4.2 字符比较， = != 
select name from user where name="adm";
select name,shell from user where shell !="/bin/bash";
select name from user where name="adm";

4.3 匹配空 is null
select * from user where name is null;
insert into user(name)values(null);
select * from user where name is null;

4.4 匹配非空 is not null
select * from user where is not null;

逻辑匹配 多个条件匹配时使用
逻辑或 or
select name,uid,gid from users where name="root" or uid=3 or gid=1; 
逻辑与 and
select name,uid,gid from users where name="root" and uid=3 and gid=1;
逻辑非 ! 和 not
select * from users where name !="root";
select * from users where name is not null;

范围内匹配/去重匹配
在...里.. in(值列表)
select name from users where name in ("ada","lion","tom","lucy");
select name from users where uid in (10,20,30,7);
不在..里.. not in(值列表)
select name,shell from user where shell not in ("/bin/bash","/sbin/nologin");
在..之间...between数字1 and 数字2
select * from users where id between 5 and 15;
select * from users where uid between 10 and 20;
distinct 去重显示 相同的只显示一遍
select distinct gid from users;
select distinct shell from users where id>=10;
高级匹配条件
1.模糊查询 like _ %(0个或多个) 普通字符

slect name from uses where name like '___';
slect name from uses where name like '__';
select name from users where name like 'a%';
select name from users where name like '%a%';（至少有一个字符a）
2.正则表达式 . ^ $ [] [^] * | 
select name from users where name regexp '^a|^r';
select name from users where name regexp '[0-9]';
select name from users where name regexp '^r.*t$';
3.四则运算
select name,uid,uid-1 from  users where id <=3;
update user set uid=uid+1 where id<=3;
select name,uid,gid,uid+gid sum from users where id<=3;
提高优先级()
select name,uid,gid,(uid +gid)/2 pjz from user where id <=3;

操作查询结果
1.聚集函数
select avg(uid) from users;
select avg(uid) from users where uid <=10;

select sum(uid) from users;
select sum(uid) from users where shell !="/bin/bash";

select min(uid) from users;
select min(uid) from users where name regexp '^a';

select max(uid) from users;
select max(uid) from users;

select count(name) from users;
select count(name) from users where shell="/bin/bash";

2.查询结果排序
select name,uid from users where uid>=10 and uid<=500 order by uid desc;
select name,uid from users where uid>=10 and uid<=500 order by uid;
select name,uid from users where uid>=10 and uid<=500 order by uid asc;
查询结果分组 group by
select shell from users;
select shell from users group by shell;
select shell from users where name regexp "a" group by shell;
select distinct shell from users where name regexp "a";
查询结果过滤 having 条件, 在查询结果里过滤条件
select name from users where shell!="/bin/bash" having name="adm";

select name from users where shell!="/bin/bash" and name="adm";

限制查询结果显示行数 limit N 显示前N条记录，limit N , M 从查询结果的 第 N+1 行开始显示，显示 M 行，limit 0是第一行
select * from users where uid <= 10;
select * from users where uid<=10 limit 3; 
select * from users where uid <=10 limit 6, 3; ##从查询结果的 第7行开始显示，显示3行



day4
多表查询
1.复制表 
备份数据 create table userdb.users2 select * from users;  
快速建表,只有表结构，查询条件不成立 create table userdb.users3 select * from userdb.users where 1  > 2;


2.多表查询
1.迪卡积
select t1.name,t2.name from t1,t2;
select t1.name ,t1.uid,t2.* from t1,t2;
select * from t1,t2 where t1.name="root" and t1.name=t2.name;
2.where 子查询 
select name ,uid from userdb.users where uid > (select avg(uid) from userdb.users);
select name from userdb.users where name in(select user from mysql.user where host="localhost" and user="root");

3.左连接 left join...on...  查询条件成立时，以左边的表为主显示查询结果
准备表
create talbe t3 select name,uid,shell,password from userdb.users limit 6;
create table t4 select name,uid,shell,password from userdb.users limit8;

select * from t3 left join t4 on t3.name=t4.name and t3.uid=t4.uid;
4.右连接 right join...on... 查询条件成立时，以右边的表为主显示查询结果
select * from t3 right join t4 on t3.name=t4.name and t3.uid=t4.uid;

mysql管理工具
phpmyAdmin
workbench
Navicat
用户授权及撤销
修改密码
mysqladmin -hlocalhost -uroot -p password "新密码"
Enter password:旧密码

恢复MySQL管理密码
停止服务
systemctl  stop mysqld.service 
vim /etc/my.cnf
若配置了密码策略要注释掉
#validate_password_policy=0
#validate_password_length=6
添加skip-grant-tables=1 ##跳过授权表
重启服务
systemctl  restart mysqld.service
mysql -u root -p
Enter password:   //直接回车
update mysql.user set authentication_string=password('123456') where user='root' and host='localhost' //重设root密码
flush privileges; //刷新授权表
通过执行“FLUSH PRIVILEGES;”可使授权表立即生效，对于正常运行的MySQL服务，也可以用上述方法来修改密码，不用重启服务。
本例中因为是恢复密码，最好重启MySQL服务程序，所以上述“FLUSH PRIVILEGES;”操作可跳过

重新以正常方式启动MySQL服务程序，验证新密码
如果前面是修改/etc/my.cnf配置的方法来跳过授权表，则重置root密码后，应去除相应的设置以恢复正常
vim /etc/my.cnf
[mysqld]
#skip_grant_tables=1     
systemctl  restart mysqld.service

3.1 授权库

3.2用户授权

3.3权限撤销

授权用户修改连接密码
set password=password('123456');
管理员修改授权用户密码
set password from ada@"192.168.4.%"=password('123456');

DAY5 数据备份与恢复
完全备份与恢复
数据备份方式 物理备份 逻辑备份
1物理备份 冷备，cp,tar
cp -rp /var/lib/mysql/数据库 备份目录/文件名
tar -czvf xxx.tar.gz /var/lib/mysql/数据库/*
恢复
cp -rp 备份目录/文件名 /var/lib/mysql/数据库/
tar -zxvf xxx.tar.gz -C /var/lib/mysql/数据库名/

2逻辑备份 mysql mysqldump
备份操作
mysqldump -uroot -p密码 库名>路径/xxx.sql
mkdir /dbbak
mysqldump -uroot -p123456 -A > /dbbak/full.sql
mysqldum -uroot -p123456 userdb > /dbbak/userdb_full.sql;
mysqldump -uroot -p123456 -B db2 userdb > /dbbak/twodb.sql;
恢复
mysql -uroot -p密码 库名<路径/xxx.sql
注意 恢复时多个库的恢复库名参数不必写

数据增量备份与恢复
 --备份上次备份后，所有新产生的数据
实时增量备份 启用binlog日志文件实现
vim /etc/my.cnf
server_id=50   ##可以用当前主机的ip地址主机位作为服务编号
log-bin ##启用
systemctl restart mysqld
实时增量恢复


差异备份 
 --备份完全备份后，所有新产生的数据




